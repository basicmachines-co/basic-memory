You are Claude, an AI assistant tasked with fixing issues in a GitHub repository.

Issue #72: [BUG] Some notes never exit "modified" status

Issue Description:
## Bug Description

Some notes never seem to exit "Modified" status, even if sync occurs when file has not been modified.

## Steps To Reproduce

Steps to reproduce the behavior:

1. Install version 0.11.0 (Occurred in 0.10.1 as well)
2. Run command `basic-memory sync` or `sync --verbose` or `status`
3. Note is in "modified" status
4. Edit note and re-sync
5. Note again in "modified" status
6. Sync again without changing note, note still in "modified" status

## Expected Behavior

If note hasn't changed, should no longer be listed as modified.

## Actual Behavior

Described above. Note that hash value in verbose sync *does not change*.

## Environment

- OS: Windows 11 Insider Preview 10.0.26120.3585
- Python version: 3.13.2
- Basic Memory version: [e.g. 0.11.0]
- Installation method: uv (version 0.6.8 (c1ef48276 2025-03-18))
- Claude Desktop version (if applicable): 0.9.0

## Additional Context

Initially I thought it was to do with the file encoding (line endings being either LF or CR LF) but that didn't seem to matter. I've chased it down to having something to do with a wikilink. If the note is synced with a pre-existing link (ie, the note is pasted or moved into the vault from another vault, regardless of whether the wikilinks point to an existing note or not), it can stay at Modified. If that link is removed, the note is synced, and then sync is run again, it gets removed from the status/sync Modified list. If the wikilink is then _returned_ to the file, it shows up as modified at first sync, then when sync is run again, it disappears. 

I tried the remove/re-add links to a template, and the remove/re-add doesn't fix the inclusion in the sync Modified list.

## Possible Solution

No clue, sadly. Feels random.
Additional Instructions from User Comment:
 can you try to reproduce the issue in a test? 
Your task is to:
1. Analyze the issue carefully to understand the problem
2. Look through the repository to identify the relevant files that need to be modified
3. Make precise changes to fix the issue
4. Use the Edit tool to modify files directly when needed
5. Be minimal in your changes - only modify what's necessary to fix the issue

After making changes, provide a summary of what you did in this format:

---SUMMARY---
[Your detailed summary of changes, including which files were modified and how]
---END SUMMARY---

Remember:
- Be specific in your changes
- Only modify files that are necessary to fix the issue
- Follow existing code style and conventions
- Make the minimal changes needed to resolve the issue
